// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  FAILED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  RESOLVED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  BOOKING_PAYMENT
  REFUND
  COMMISSION_PAYOUT
  CREDIT
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

model User {
  id                 String     @id @default(cuid())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  email              String     @unique
  username           String     @unique
  name               String
  phone              String?
  passwordHash       String
  role               UserRole   @default(USER)
  status             UserStatus @default(ACTIVE)
  canBypassRateLimit Boolean    @default(false)
  tenantId           String?
  displayCurrencies  String     @default("[]")

  // Relations
  refreshTokens      RefreshToken[]
  bookings           Booking[]
  tickets            Ticket[]
  refunds            Refund[]
  createdFlights     Flight[]            @relation("FlightCreator")
  savedPassengers    SavedPassenger[]
  wallets            Wallet[]
  walletTransactions WalletTransaction[]
  activityLogs       ActivityLog[]
  journalEntries     JournalEntry[]
  expenses           Expense[]
  agentAllotments    SeatAllotment[]     @relation("AgentAllotments")

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("refresh_tokens")
}

model SavedPassenger {
  id                     String   @id @default(cuid())
  userId                 String
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName              String
  lastName               String
  nationality            String
  gender                 String
  nationalId             String?
  passportNumber         String?
  passportIssuingCountry String?
  dateOfBirth            String?
  passportExpiryDate     String?
  createdAt              DateTime @default(now())

  bookingId String?
  booking   Booking? @relation("BookingPassengers", fields: [bookingId], references: [id])

  @@map("saved_passengers")
}

model Tenant {
  id                  String   @id @default(cuid())
  name                String
  slug                String   @unique
  contactEmail        String
  contactPhone        String
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  logoUrl             String?
  primaryColor        String?
  theme               String   @default("default")
  homepageContentId   String   @default("home-1")
  supportedLanguages  String   @default("[\"fa\", \"en\", \"ar\"]")
  supportedCurrencies String   @default("[\"IRR\", \"USD\"]")

  @@map("tenants")
}

model Flight {
  id                                String           @id @default(cuid())
  airline                           String
  airlineLogoUrl                    String?
  flightNumber                      String
  aircraft                          String
  flightClass                       String
  duration                          Int // Duration in minutes
  stops                             Int              @default(0)
  price                             BigInt
  taxes                             BigInt
  availableSeats                    Int
  totalCapacity                     Int
  baggageAllowance                  String?
  status                            String           @default("SCHEDULED")
  bookingClosesBeforeDepartureHours Int              @default(3)
  sourcingType                      String           @default("Manual")
  commissionModelId                 String?
  commissionModel                   CommissionModel? @relation(fields: [commissionModelId], references: [id])
  refundPolicyId                    String?
  refundPolicy                      RefundPolicy?    @relation(fields: [refundPolicyId], references: [id])
  creatorId                         String?
  creator                           User?            @relation("FlightCreator", fields: [creatorId], references: [id])
  tenantId                          String?
  createdAt                         DateTime         @default(now())
  updatedAt                         DateTime         @updatedAt

  // Relations to Airport for departure and arrival
  departureAirportId String
  departureAirport   Airport  @relation("DepartureFlight", fields: [departureAirportId], references: [id])
  departureTerminal  String?
  departureGate      String?
  departureTime      DateTime

  arrivalAirportId String
  arrivalAirport   Airport  @relation("ArrivalFlight", fields: [arrivalAirportId], references: [id])
  arrivalTerminal  String?
  arrivalGate      String?
  arrivalTime      DateTime

  // Added for reverse relations
  airlineInfo Airline @relation(fields: [airlineId], references: [id])
  airlineId   String

  aircraftInfo Aircraft @relation(fields: [aircraftId], references: [id])
  aircraftId   String

  flightClassInfo FlightClass @relation(fields: [flightClassId], references: [id])
  flightClassId   String

  bookings   Booking[]
  allotments SeatAllotment[]

  @@map("flights")
}

model SeatAllotment {
  id        String   @id @default(cuid())
  flightId  String
  flight    Flight   @relation(fields: [flightId], references: [id], onDelete: Cascade)
  agentId   String
  agent     User     @relation("AgentAllotments", fields: [agentId], references: [id])
  seats     Int
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("seat_allotments")
}

model Booking {
  id               String        @id @default(cuid())
  userId           String
  user             User          @relation(fields: [userId], references: [id])
  flightId         String
  flight           Flight        @relation(fields: [flightId], references: [id])
  contactEmail     String
  contactPhone     String
  bookingDate      DateTime      @default(now())
  status           BookingStatus @default(CONFIRMED)
  cancellationDate DateTime?
  purchasePrice    Int?
  totalPrice       Int?
  buyerReference   String?
  notes            String?
  tenantId         String

  // JSON fields for complex data
  passengersData String // JSON string
  searchQuery    String // JSON string

  // Relations
  passengersInfo SavedPassenger[] @relation("BookingPassengers")
  refunds        Refund[]
  tickets        Ticket[]

  @@map("bookings")
}

model Ticket {
  id        String       @id @default(cuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  bookingId String?
  booking   Booking?     @relation(fields: [bookingId], references: [id])
  subject   String
  status    TicketStatus @default(OPEN)
  priority  String       @default("MEDIUM")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  messages TicketMessage[]

  @@map("tickets")
}

model TicketMessage {
  id         String   @id @default(cuid())
  ticketId   String
  ticket     Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  authorId   String
  authorType String
  text       String
  timestamp  DateTime @default(now())

  @@map("ticket_messages")
}

model Refund {
  id             String   @id @default(cuid())
  bookingId      String
  booking        Booking  @relation(fields: [bookingId], references: [id])
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  requestDate    DateTime @default(now())
  createdAt      DateTime @default(now())
  status         String   @default("PENDING_EXPERT_REVIEW")
  originalAmount Int
  penaltyAmount  Int
  refundAmount   Int
  reason         String?
  adminNotes     String?
  processedAt    DateTime?

  expertReviewerName    String?
  expertReviewDate      DateTime?
  financialReviewerName String?
  financialReviewDate   DateTime?
  paymentProcessorName  String?
  paymentDate           DateTime?
  rejecterName          String?
  rejectionDate         DateTime?
  rejectionReason       String?

  @@map("refunds")
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  balance   Int      @default(0)
  currency  String   @default("IRR")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, currency])
  @@map("wallets")
}

model WalletTransaction {
  id               String          @id @default(cuid())
  userId           String
  user             User            @relation(fields: [userId], references: [id])
  date             DateTime        @default(now())
  type             TransactionType
  amount           Int
  currency         String
  description      String
  relatedBookingId String?
  relatedUserId    String?

  @@map("wallet_transactions")
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  timestamp DateTime @default(now())

  @@map("activity_logs")
}

model Account {
  id       String      @id
  name     String      // JSON string
  code     String?
  type     AccountType
  parentId String?
  isParent Boolean     @default(false)
  balance  Int         @default(0)
  currency String      @default("IRR")

  // Relations
  transactions Transaction[]
  children     Account[]     @relation("AccountHierarchy")
  parent       Account?      @relation("AccountHierarchy", fields: [parentId], references: [id])
  expenses     Expense[]

  @@map("accounts")
}

model JournalEntry {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  description String
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  bookingId   String?

  // Relations
  transactions Transaction[]

  @@map("journal_entries")
}

model Transaction {
  id             String       @id @default(cuid())
  journalEntryId String
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  accountId      String
  account        Account      @relation(fields: [accountId], references: [id])
  debit          Int          @default(0)
  credit         Int          @default(0)

  @@map("transactions")
}

model Expense {
  id               String   @id @default(cuid())
  date             DateTime @default(now())
  description      String
  amount           Int
  currency         String   @default("IRR")
  accountId        String
  account          Account  @relation(fields: [accountId], references: [id])
  recordedByUserId String
  recordedBy       User     @relation(fields: [recordedByUserId], references: [id])

  @@map("expenses")
}

model Airline {
  id      String @id @default(cuid())
  name    String // JSON string
  logoUrl String

  flights Flight[]

  @@map("airlines")
}

model Aircraft {
  id       String @id @default(cuid())
  name     String // JSON string
  capacity Int

  flights Flight[]

  @@map("aircrafts")
}

model FlightClass {
  id   String @id @default(cuid())
  name String // JSON string

  flights Flight[]

  @@map("flight_classes")
}

model Airport {
  id      String  @id @default(cuid())
  iata    String  @unique
  icao    String?
  code    String? @unique
  name    String  // JSON string
  city    String  // JSON string
  country String  // JSON string

  departureFlights Flight[] @relation("DepartureFlight")
  arrivalFlights   Flight[] @relation("ArrivalFlight")

  @@map("airports")
}

model CommissionModel {
  id                   String @id @default(cuid())
  name                 String // JSON string
  calculationType      String
  charterCommission    Float
  creatorCommission    Float
  webServiceCommission Float

  flights Flight[]

  @@map("commission_models")
}

model RateLimit {
  id       String @id @default(cuid())
  fromCity String
  toCity   String
  maxPrice Int

  @@map("rate_limits")
}

model RefundPolicy {
  id         String  @id @default(cuid())
  name       String  // JSON string
  policyType String?
  airlineId  String?
  rules      String  // JSON string

  flights Flight[]

  @@map("refund_policies")
}

model Currency {
  id                String  @id @default(cuid())
  name              String  // JSON string
  code              String  @unique
  symbol            String  // JSON string
  exchangeRateToUSD Float
  isBaseCurrency    Boolean @default(false)
  isActive          Boolean @default(true)

  // Relations
  exchangeRates     ExchangeRate[] @relation("BaseCurrency")
  targetRates       ExchangeRate[] @relation("TargetCurrency")

  @@map("currencies")
}

model ExchangeRate {
  id              String   @id @default(cuid())
  baseCurrencyId  String
  targetCurrencyId String
  rate            Float
  lastUpdated     DateTime @default(now())
  source          String   @default("MANUAL") // MANUAL, API, etc.
  isActive        Boolean  @default(true)
  
  // Relations
  baseCurrency    Currency @relation("BaseCurrency", fields: [baseCurrencyId], references: [id])
  targetCurrency  Currency @relation("TargetCurrency", fields: [targetCurrencyId], references: [id])

  @@unique([baseCurrencyId, targetCurrencyId])
  @@map("exchange_rates")
}

model Country {
  id          String  @id
  name        String  // JSON string
  flag        String?
  dialingCode String
  currency    String

  @@map("countries")
}

model Advertisement {
  id        String   @id @default(cuid())
  title     String
  imageUrl  String
  linkUrl   String
  placement String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("advertisements")
}

model SiteContent {
  id        String   @id @default(cuid())
  section   String   @unique
  content   String   // JSON string
  updatedAt DateTime @updatedAt

  @@map("site_content")
}

model TelegramBotConfig {
  id        String   @id @default("telegram_config")
  isEnabled Boolean  @default(false)
  botToken  String?
  chatId    String?
  notifyOn  String   // JSON string
  updatedAt DateTime @updatedAt

  @@map("telegram_bot_config")
}

model WhatsAppBotConfig {
  id            String   @id @default("whatsapp_config")
  isEnabled     Boolean  @default(false)
  apiKey        String?
  phoneNumberId String?
  notifyOn      String   // JSON string
  updatedAt     DateTime @updatedAt

  @@map("whatsapp_bot_config")
}

model RolePermissions {
  id          String   @id @default("role_permissions")
  permissions String   // JSON string
  updatedAt   DateTime @updatedAt

  @@map("role_permissions")
}
