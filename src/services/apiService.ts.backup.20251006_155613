import { jwtDecode } from 'jwt-decode';

interface ApiResponse<T = any> {
  data?: T;
  message?: string;
  error?: string;
  status?: number;
  success?: boolean;
}

interface User {
  id: string;
  username: string;
  role: string;
  name: string;
  email: string;
  phone: string;
  status: string;
  canBypassRateLimit: boolean;
  tenantId: string;
  displayCurrencies: string[];
  wallet: any;
  savedPassengers: any[];
  createdAt: string;
  updatedAt: string;
}

interface Flight {
  id: string;
  airline: string;
  flightNumber: string;
  departure: {
    airport: string;
    city: string;
    time: string;
    date: string;
  };
  arrival: {
    airport: string;
    city: string;
    time: string;
    date: string;
  };
  
  price: number;
  currency: string;
  class: string;
  availableSeats: number;
  duration: string;
  stops: number;
  aircraft: string;
  baggage: {
    carryOn: string;
    checked: string;
  };
  amenities: string[];
  refundable: boolean;
  changeable: boolean;
  bookingClass: string;
  fareType: string;
  restrictions: string[];
  lastUpdated: string;
}

interface Booking {
  id: string;
  userId: string;
  flightId: string;
  passengers: any[];
  totalAmount: number;
  currency: string;
  status: string;
  paymentStatus: string;
  bookingDate: string;
  flight: Flight;
  user: User;
}

interface SearchQuery {
  origin: string;
  destination: string;
  departureDate: string;
  returnDate?: string;
  passengers: {
    adults: number;
    children: number;
    infants: number;
  };
  class: string;
  directOnly: boolean;
}

class ApiService {
  private baseURL: string;
  private accessToken: string | null = null;
  private refreshToken: string | null = null;

  constructor() {
    this.baseURL = 'http://localhost:3000/api/v1';
    this.loadTokens();
    console.log('ðŸ”‘ ApiService initialized with tokens:', {
      hasAccessToken: !!this.accessToken,
      hasRefreshToken: !!this.refreshToken,
      accessTokenPreview: this.accessToken ? this.accessToken.substring(0, 50) + '...' : null
    });
  }

  private loadTokens(): void {
    this.accessToken = localStorage.getItem('accessToken');
    this.refreshToken = localStorage.getItem('refreshToken');
  }

  private saveTokens(accessToken: string, refreshToken: string): void {
    this.accessToken = accessToken;
    this.refreshToken = refreshToken;
    localStorage.setItem('accessToken', accessToken);
    localStorage.setItem('refreshToken', refreshToken);
  }

  private clearTokens(): void {
    this.accessToken = null;
    this.refreshToken = null;
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
  }

  private async refreshTokensIfNeeded(): Promise<boolean> {
    // Reload tokens from localStorage in case they were updated
    this.loadTokens();
    
    if (!this.accessToken) {
      return false;
    }

    try {
      const decoded = jwtDecode(this.accessToken) as any;
      const now = Date.now() / 1000;
      
      if (decoded.exp && decoded.exp > now + 300) {
        return true;
      }

      // Token is expiring soon, try to refresh
      if (this.refreshToken) {
        const response = await fetch(`${this.baseURL}/auth/refresh`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ refreshToken: this.refreshToken }),
        });

        if (response.ok) {
          const data = await response.json();
          this.saveTokens(data.accessToken, data.refreshToken);
          return true;
        } else {
          this.clearTokens();
          return false;
        }
      }

      return false;
    } catch (error) {
      console.error('Token refresh failed:', error);
      this.clearTokens();
      return false;
    }
  }

  public async refreshTokens(): Promise<boolean> {
    return this.refreshTokensIfNeeded();
  }

  public getAccessToken(): string | null {
    return this.accessToken;
  }

  public getRefreshToken(): string | null {
    return this.refreshToken;
  }

  private async makeRequest<T>(
    endpoint: string,
    options: RequestInit = {},
    requireAuth: boolean = true
  ): Promise<ApiResponse<T>> {
    console.log(`ðŸ”„ Making request to: ${endpoint}`);
    
    // Only check authentication for protected endpoints
    if (requireAuth) {
      const tokenValid = await this.refreshTokensIfNeeded();
      if (!tokenValid) {
        throw new Error('Authentication required');
      }
    }

    const url = `${this.baseURL}${endpoint}`;
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
    };

    // Add custom headers
    if (options.headers) {
      Object.assign(headers, options.headers);
    }

    if (this.accessToken) {
      headers.Authorization = `Bearer ${this.accessToken}`;
    }

    try {
      const response = await fetch(url, {
        ...options,
        headers,
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || `HTTP ${response.status}`);
      }

      return {
        data: data,
        success: true,
        status: response.status
      };
    } catch (error) {
      console.error(`API request failed for ${endpoint}:`, error);
      throw error;
    }
  }

  // Auth methods
  async login(credentials: { username: string; password: string }): Promise<ApiResponse<{ user: User; accessToken: string; refreshToken: string }>> {
    return this.makeRequest('/auth/login', {
      method: 'POST',
      body: JSON.stringify(credentials),
    }, false);
  }

  async register(userData: any): Promise<ApiResponse<{ user: User; accessToken: string; refreshToken: string }>> {
    return this.makeRequest('/auth/register', {
      method: 'POST',
      body: JSON.stringify(userData),
    }, false);
  }

  async logout(): Promise<ApiResponse> {
    const result = await this.makeRequest('/auth/logout', {
      method: 'POST',
    });
    this.clearTokens();
    return result;
  }

  async refreshTokenPublic(refreshToken: string): Promise<ApiResponse<{ accessToken: string; refreshToken: string }>> {
    return this.makeRequest('/auth/refresh', {
      method: 'POST',
      body: JSON.stringify({ refreshToken }),
    }, false);
  }

  // Flight methods
  async searchFlights(query: SearchQuery): Promise<ApiResponse<Flight[]>> {
    return this.makeRequest('/flights/search', {
      method: 'POST',
      body: JSON.stringify(query),
    }, false);
  }

  async getFlightById(id: string): Promise<ApiResponse<Flight>> {
    return this.makeRequest(`/flights/${id}`, {}, false);
  }

  async getPopularRoutes(): Promise<ApiResponse<any[]>> {
    return this.makeRequest('/flights/popular-routes', {}, false);
  }

  // Booking methods
  async createBooking(bookingData: any): Promise<ApiResponse<Booking>> {
    return this.makeRequest('/bookings', {
      method: 'POST',
      body: JSON.stringify(bookingData),
    });
  }

  async getBookings(): Promise<ApiResponse<Booking[]>> {
    return this.makeRequest('/bookings');
  }

  async getBookingById(id: string): Promise<ApiResponse<Booking>> {
    return this.makeRequest(`/bookings/${id}`);
  }

  async cancelBooking(id: string): Promise<ApiResponse> {
    return this.makeRequest(`/bookings/${id}/cancel`, {
      method: 'POST',
    });
  }

  // User methods
  async getProfile(): Promise<ApiResponse<User>> {
    return this.makeRequest('/users/profile');
  }

  async updateProfile(userData: any): Promise<ApiResponse<User>> {
    return this.makeRequest('/users/profile', {
      method: 'PUT',
      body: JSON.stringify(userData),
    });
  }

  async chargeWallet(amount: number): Promise<ApiResponse> {
    return this.makeRequest('/users/wallet/charge', {
      method: 'POST',
      body: JSON.stringify({ amount }),
    });
  }

  async getWalletBalance(): Promise<ApiResponse<{ balance: number; currency: string }>> {
    return this.makeRequest('/users/wallet/balance');
  }

  // Admin methods
  async getAdminStats(): Promise<ApiResponse<any>> {
    return this.makeRequest('/admin/stats');
  }

  async getAdminBookings(): Promise<ApiResponse<Booking[]>> {
    return this.makeRequest('/admin/bookings');
  }

  async getAdminFlights(): Promise<ApiResponse<Flight[]>> {
    return this.makeRequest('/admin/flights');
  }

  async getAdminUsers(): Promise<ApiResponse<User[]>> {
    return this.makeRequest('/admin/users');
  }

  async getAdminTenants(): Promise<ApiResponse<any[]>> {
    return this.makeRequest('/admin/tenants');
  }

  async getAdminPermissions(): Promise<ApiResponse<any[]>> {
    return this.makeRequest('/admin/permissions');
  }

  async getAdminAdvertisements(): Promise<ApiResponse<any[]>> {
    return this.makeRequest('/admin/advertisements');
  }

  async getAdminActivityLogs(): Promise<ApiResponse<any[]>> {
    return this.makeRequest('/admin/activity-logs');
  }

  async getAdminRefunds(): Promise<ApiResponse<any[]>> {
    return this.makeRequest('/admin/refunds');
  }

  async getAdminRateLimits(): Promise<ApiResponse<any[]>> {
    return this.makeRequest('/admin/rate-limits');
  }

  async getAllTickets(): Promise<ApiResponse<any[]>> {
    return this.makeRequest('/admin/tickets');
  }

  async getCommissionModels(): Promise<ApiResponse<any[]>> {
    return this.makeRequest('/admin/commission-models');
  }

  async getRefundPolicies(): Promise<ApiResponse<any[]>> {
    return this.makeRequest('/admin/refund-policies');
  }

  async getChartOfAccounts(): Promise<ApiResponse<any[]>> {
    return this.makeRequest('/admin/accounting/chart-of-accounts');
  }

  // Content methods
  async getHomeContent(lang: string = 'fa'): Promise<ApiResponse<any>> {
    return this.makeRequest(`/content/home?lang=${lang}`, {}, false);
  }

  async getAboutContent(lang: string = 'fa'): Promise<ApiResponse<any>> {
    return this.makeRequest(`/content/about?lang=${lang}`, {}, false);
  }

  async getContactContent(lang: string = 'fa'): Promise<ApiResponse<any>> {
    return this.makeRequest(`/content/contact?lang=${lang}`, {}, false);
  }

  async getPopularDestinations(lang: string = 'fa'): Promise<ApiResponse<any[]>> {
    return this.makeRequest(`/content/popular-destinations?lang=${lang}`, {}, false);
  }

  // Basic data methods
  async getBasicData(type: string): Promise<ApiResponse<any[]>> {
    return this.makeRequest(`/admin/basic-data/${type}`);
  }

  // Generic HTTP methods
  async get<T>(endpoint: string, requireAuth: boolean = true): Promise<ApiResponse<T>> {
    return this.makeRequest<T>(endpoint, {}, requireAuth);
  }

  async post<T>(endpoint: string, data: any, requireAuth: boolean = true): Promise<ApiResponse<T>> {
    return this.makeRequest<T>(endpoint, {
      method: 'POST',
      body: JSON.stringify(data),
    }, requireAuth);
  }

  async put<T>(endpoint: string, data: any, requireAuth: boolean = true): Promise<ApiResponse<T>> {
    return this.makeRequest<T>(endpoint, {
      method: 'PUT',
      body: JSON.stringify(data),
    }, requireAuth);
  }

  async delete<T>(endpoint: string, requireAuth: boolean = true): Promise<ApiResponse<T>> {
    return this.makeRequest<T>(endpoint, {
      method: 'DELETE',
    }, requireAuth);
  }
}

export const apiService = new ApiService();
export default apiService;

